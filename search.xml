<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring Boot集成Mybatis笔记</title>
    <url>/2019/10/27/Spring-Boot%E9%9B%86%E6%88%90Mybatis%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Spring-Boot集成Mybatis笔记"><a href="#Spring-Boot集成Mybatis笔记" class="headerlink" title="Spring Boot集成Mybatis笔记"></a>Spring Boot集成Mybatis笔记</h1><p>   在学校做实训项目，计划使用spring cloud尝试部署一下微服务，结果不小心在springboot集成mybatis的配置这里花掉了不少时间，觉得还是有必要记录一下，先写配置过程，再写这样配置的原因和思路，用以分享和讨论</p>
<p>1.新建project,点击Spring Initializr选项，如果网络不太好可以选择custom并输入<a href="http://start.spring.io/" target="_blank" rel="noopener">http://start.spring.io/</a> ，点击next;</p>
<p><img src="https://www.wandada.live/images/v2-5b08df5d78b7c6e4a96da02b3b86641a_b.png" alt=""></p>
<p>2.根据个人情况填写，此处为默认，不再赘述，点击next</p>
<p><img src="https://www.wandada.live/images/v2-5c57c57816e6441c07226162150c33d2_b.png" alt=""></p>
<p>3.选中Web-&gt;Spring Web（有一种版本为Web -&gt;Web）,点击next</p>
<p><img src="https://www.wandada.live/images/v2-d9629a5a642ef9b44f5aefe60cdcd581_b.png" alt=""></p>
<p>4.继续next,配置好项目路径后点击Finish，项目创建完毕，打开pom.xml文件如下</p>
<p><img src="https://www.wandada.live/images/v2-ea1ed4755f95aeeb3fcbc37be9d03012_b.png" alt=""></p>
<p>5.现在要在pom.xml的dependencies标签中添加jdbc和mybatis的依赖，然后右键点击pom.xml-&gt;Maven-&gt;reimport，即可完成刷新，<strong>注意匹配自己安装的mysql的版本号，作者安装的是mysql8.0</strong>，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- mybatis --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- mysql --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>6.打开项目文件夹，找到src-&gt;main-&gt;resources-&gt;application.properties并将其修改为application.yml，然后添加以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://localhost:3306/**数据库名**?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC</span><br><span class="line">    username: **数据库用户名**</span><br><span class="line">    password: **数据库密码**</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver </span><br><span class="line">                              #mysql 5.0 :com.mysql.jdbc.Driver</span><br><span class="line">  jpa:</span><br><span class="line">    hibernate:</span><br><span class="line">      ddl-auto: update</span><br></pre></td></tr></table></figure>

<p>7.在com.example.demo新建controller包，并添加HelloController类，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        return &quot;hello world&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8.右上角启动运行DemoApplication类，运行成功后在浏览器访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a>，若得到如下结果，即springboot配置成功</p>
<p><img src="https://www.wandada.live/images/v2-613bc05eebda75c6dda31e6c24592417_b.png" alt=""></p>
<p><img src="https://www.wandada.live/images/v2-1eb8d5212a6de7f4a4fa8fca2784c8d5_b.png" alt=""></p>
<p><img src="https://www.wandada.live/images/v2-a8a7840afe1684a38cdd5405e7f1276e_b.png" alt=""></p>
<p>9.接下来配置mybatis，先在mysql数据库中创建一张测试用的表，并添加一些数据，此过程不赘述。同时<strong>在com.example.demo中新建domain包和mapper包</strong>，其中<strong>domain包</strong>新建对应测试表数据的<strong>实体类</strong>，<strong>mapper包</strong>中新建执行sql语句的<strong>mapper接口</strong>，并<strong>添加@Repository注解。</strong>这里以student为例，Student实体类略，StudentMapper类代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.example.demo.mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.example.demo.domain.Student;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line">import org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public interface StudentMapper &#123;</span><br><span class="line"></span><br><span class="line">    @Select(&quot;select * from student;&quot;)</span><br><span class="line">    List &lt;Student&gt; findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>10.修改DemoApplication运行类的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.example;</span><br><span class="line"></span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line">@ComponentScan(basePackages = &quot;com.example.demo.*&quot;)</span><br><span class="line">@MapperScan(&#123;&quot;com.example.demo.mapper&quot;&#125;)</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>10.在src -&gt; test -&gt; java -&gt; com.example.demo.mapper的DemoApplicationTests类中添加代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.example.demo;</span><br><span class="line"></span><br><span class="line">import com.example.mapper.StudentMapper;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line">import org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class ExampleApplicationTests &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void contextLoads() &#123;</span><br><span class="line">        System.out.println(studentMapper.findAll()[0].toString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>11.运行contextLoads()，输出指定数据，则配置成功</p>
]]></content>
      <tags>
        <tag>操作笔记</tag>
        <tag>java</tag>
        <tag>web</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA创建maven web工程 步骤整理</title>
    <url>/2019/10/27/IDEA%E5%88%9B%E5%BB%BAmaven-web%E5%B7%A5%E7%A8%8B-%E6%AD%A5%E9%AA%A4%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="IDEA创建maven-web工程-步骤整理"><a href="#IDEA创建maven-web工程-步骤整理" class="headerlink" title="IDEA创建maven web工程 步骤整理"></a>IDEA创建maven web工程 步骤整理</h1><h3 id="一-创建工程"><a href="#一-创建工程" class="headerlink" title="一.创建工程"></a>一.创建工程</h3><h4 id="1-File-gt-New-gt-Project点击创建工程"><a href="#1-File-gt-New-gt-Project点击创建工程" class="headerlink" title="(1)File-&gt;-New-&gt;Project点击创建工程"></a>(1)File-&gt;-New-&gt;Project点击创建工程</h4><p><img src="https://www.wandada.live/images/17073244-bc2f946c6cb0cdf9.png" alt=""></p>
<h4 id="2-勾选标记处，并点击next"><a href="#2-勾选标记处，并点击next" class="headerlink" title="(2)勾选标记处，并点击next"></a>(2)勾选标记处，并点击next</h4><p><img src="https://www.wandada.live/images/17073244-06de848a69a613a4.png" alt=""></p>
<h4 id="3-GroupId-AtifactId自定义，点击next"><a href="#3-GroupId-AtifactId自定义，点击next" class="headerlink" title="(3)GroupId,AtifactId自定义，点击next"></a>(3)GroupId,AtifactId自定义，点击next</h4><p><img src="https://www.wandada.live/images/17073244-4e3df873e1fbab9c.png" alt=""></p>
<h4 id="4-关联本地maven仓库"><a href="#4-关联本地maven仓库" class="headerlink" title="(4)关联本地maven仓库"></a>(4)关联本地maven仓库</h4><h5 id="nbsp-nbsp-1-官网下载maven的zip包，并解压到本地"><a href="#nbsp-nbsp-1-官网下载maven的zip包，并解压到本地" class="headerlink" title="&nbsp;&nbsp;1.官网下载maven的zip包，并解压到本地"></a>&nbsp;&nbsp;1.官网下载maven的zip包，并解压到本地</h5><h5 id="nbsp-nbsp-2-在本地maven路径下创建repository文件夹（也可自行定义文件夹所在位置）"><a href="#nbsp-nbsp-2-在本地maven路径下创建repository文件夹（也可自行定义文件夹所在位置）" class="headerlink" title="&nbsp;&nbsp;2.在本地maven路径下创建repository文件夹（也可自行定义文件夹所在位置）"></a>&nbsp;&nbsp;2.在本地maven路径下创建repository文件夹（也可自行定义文件夹所在位置）</h5><h5 id="nbsp-nbsp-3-勾选两个Override，分别绑定maven路径下的settings-xml以及刚新建的repository文件夹，点击next"><a href="#nbsp-nbsp-3-勾选两个Override，分别绑定maven路径下的settings-xml以及刚新建的repository文件夹，点击next" class="headerlink" title="&nbsp;&nbsp;3.勾选两个Override，分别绑定maven路径下的settings.xml以及刚新建的repository文件夹，点击next"></a>&nbsp;&nbsp;3.勾选两个Override，分别绑定maven路径下的settings.xml以及刚新建的repository文件夹，点击next</h5><p><img src="https://www.wandada.live/images/17073244-7b628aab03488e09.png" alt=""></p>
<h4 id="5-自行定义工程名和工程文件夹存放路径，点击Finish，工程创建成功"><a href="#5-自行定义工程名和工程文件夹存放路径，点击Finish，工程创建成功" class="headerlink" title="(5)自行定义工程名和工程文件夹存放路径，点击Finish，工程创建成功"></a>(5)自行定义工程名和工程文件夹存放路径，点击Finish，工程创建成功</h4><p><img src="https://www.wandada.live/images/17073244-9a5557edc78f2e99.png" alt=""></p>
<h3 id="二-配置maven-web工程"><a href="#二-配置maven-web工程" class="headerlink" title="二.配置maven web工程"></a>二.配置maven web工程</h3><h4 id="（1）工程目录如下所示-src存放工程源代码，webapp存放工程web页面文件，pom-xml存放maven项目引用依赖"><a href="#（1）工程目录如下所示-src存放工程源代码，webapp存放工程web页面文件，pom-xml存放maven项目引用依赖" class="headerlink" title="（1）工程目录如下所示,src存放工程源代码，webapp存放工程web页面文件，pom.xml存放maven项目引用依赖"></a>（1）工程目录如下所示,src存放工程源代码，webapp存放工程web页面文件，pom.xml存放maven项目引用依赖</h4><p><img src="https://www.wandada.live/images/17073244-5cc1483a5565cd8d.png" alt=""></p>
<h4 id="（2）配置并管理工程文件"><a href="#（2）配置并管理工程文件" class="headerlink" title="（2）配置并管理工程文件"></a>（2）配置并管理工程文件</h4><h5 id="nbsp-nbsp-1-在src文件目录下新建test文件夹，在main文件目录下新建java，resources文件夹"><a href="#nbsp-nbsp-1-在src文件目录下新建test文件夹，在main文件目录下新建java，resources文件夹" class="headerlink" title="&nbsp;&nbsp;1.在src文件目录下新建test文件夹，在main文件目录下新建java，resources文件夹"></a>&nbsp;&nbsp;1.在src文件目录下新建test文件夹，在main文件目录下新建java，resources文件夹</h5><p><img src="https://www.wandada.live/images/17073244-f61d114871eef273.png" alt=""></p>
<h5 id="nbsp-nbsp-2-File-gt-Project-Structrue-gt-Modules"><a href="#nbsp-nbsp-2-File-gt-Project-Structrue-gt-Modules" class="headerlink" title="&nbsp;&nbsp;2.File-&gt;Project Structrue-&gt;Modules"></a>&nbsp;&nbsp;2.File-&gt;Project Structrue-&gt;Modules</h5><h5 id="nbsp-nbsp-nbsp-nbsp-IDEA独特的管理模式，给文件夹添加模块关联，用于设置文件夹的模块种类"><a href="#nbsp-nbsp-nbsp-nbsp-IDEA独特的管理模式，给文件夹添加模块关联，用于设置文件夹的模块种类" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;IDEA独特的管理模式，给文件夹添加模块关联，用于设置文件夹的模块种类"></a>&nbsp;&nbsp;&nbsp;&nbsp;IDEA独特的管理模式，给文件夹添加模块关联，用于设置文件夹的模块种类</h5><h5 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</h5><p><img src="https://www.wandada.live/images/17073244-3dd2362e089031ca.png" alt=""></p>
<h5 id="nbsp-nbsp-3-对src下的文件夹设置模块关联（鼠标右键点击文件夹并选择对应模块关联）-配置并管理工程文件成功"><a href="#nbsp-nbsp-3-对src下的文件夹设置模块关联（鼠标右键点击文件夹并选择对应模块关联）-配置并管理工程文件成功" class="headerlink" title="&nbsp;&nbsp;3.对src下的文件夹设置模块关联（鼠标右键点击文件夹并选择对应模块关联）,配置并管理工程文件成功"></a>&nbsp;&nbsp;3.对src下的文件夹设置模块关联（鼠标右键点击文件夹并选择对应模块关联）,配置并管理工程文件成功</h5><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-java-gt-Sources"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-java-gt-Sources" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java-&gt;Sources"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java-&gt;Sources</h4><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-resources-gt-Resources"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-resources-gt-Resources" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resources-&gt;Resources"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resources-&gt;Resources</h4><h4 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-test-gt-Tests"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-test-gt-Tests" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test-&gt;Tests"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test-&gt;Tests</h4><p><img src="https://www.wandada.live/images/17073244-76114c744fa7aa14.png" alt=""></p>
<h3 id="（3）maven导包功能配置"><a href="#（3）maven导包功能配置" class="headerlink" title="（3）maven导包功能配置"></a>（3）maven导包功能配置</h3><h4 id="nbsp-nbsp-1-打开工程目录中的pom-xml，找到其中的dependencies标签，项目所需导入的包的maven依赖就放在这个标签下"><a href="#nbsp-nbsp-1-打开工程目录中的pom-xml，找到其中的dependencies标签，项目所需导入的包的maven依赖就放在这个标签下" class="headerlink" title="&nbsp;&nbsp;1.打开工程目录中的pom.xml，找到其中的dependencies标签，项目所需导入的包的maven依赖就放在这个标签下"></a>&nbsp;&nbsp;1.打开工程目录中的pom.xml，找到其中的dependencies标签，项目所需导入的包的maven依赖就放在这个标签下</h4><p><img src="https://www.wandada.live/images/17073244-d09c3e43e228284b.png" alt=""></p>
<h4 id="nbsp-nbsp-2-网页打开maven的远程仓库官网-搜索你想导入的jar包（这里以mysql-connector-java包为例）"><a href="#nbsp-nbsp-2-网页打开maven的远程仓库官网-搜索你想导入的jar包（这里以mysql-connector-java包为例）" class="headerlink" title="&nbsp;&nbsp;2.网页打开maven的远程仓库官网,搜索你想导入的jar包（这里以mysql-connector-java包为例）"></a>&nbsp;&nbsp;2.网页打开<a href="https://mvnrepository.com/" target="_blank" rel="noopener">maven的远程仓库官网</a>,搜索你想导入的jar包（这里以mysql-connector-java包为例）</h4><p><img src="https://www.wandada.live/images/17073244-3bcb2ef094fd1c84.png" alt=""></p>
<h4 id="nbsp-nbsp-3-选择你想导入的jar包"><a href="#nbsp-nbsp-3-选择你想导入的jar包" class="headerlink" title="&nbsp;&nbsp;3.选择你想导入的jar包"></a>&nbsp;&nbsp;3.选择你想导入的jar包</h4><p><img src="https://www.wandada.live/images/17073244-5ef7f68ef7221763.png" alt=""></p>
<h4 id="nbsp-nbsp-4-选择导入jar包的版本"><a href="#nbsp-nbsp-4-选择导入jar包的版本" class="headerlink" title="&nbsp;&nbsp;4.选择导入jar包的版本"></a>&nbsp;&nbsp;4.选择导入jar包的版本</h4><p><img src="https://www.wandada.live/images/17073244-144a0d8fdf558e93.png" alt=""></p>
<h4 id="nbsp-nbsp-5-复制标记框里面的代码"><a href="#nbsp-nbsp-5-复制标记框里面的代码" class="headerlink" title="&nbsp;&nbsp;5.复制标记框里面的代码"></a>&nbsp;&nbsp;5.复制标记框里面的代码</h4><p><img src="https://www.wandada.live/images/17073244-857e37bbb3271d42.png" alt=""></p>
<h4 id="nbsp-nbsp-6-将复制的代码粘贴在pom-xml的dependencies标签下"><a href="#nbsp-nbsp-6-将复制的代码粘贴在pom-xml的dependencies标签下" class="headerlink" title="&nbsp;&nbsp;6.将复制的代码粘贴在pom.xml的dependencies标签下"></a>&nbsp;&nbsp;6.将复制的代码粘贴在pom.xml的dependencies标签下</h4><p><img src="https://www.wandada.live/images/17073244-e2e63d4433b12698.png" alt=""></p>
<h4 id="nbsp-nbsp-7-右键单击pom-xml，单击maven-gt-reimport，保证网络顺畅，稍等片刻即导入成功"><a href="#nbsp-nbsp-7-右键单击pom-xml，单击maven-gt-reimport，保证网络顺畅，稍等片刻即导入成功" class="headerlink" title="&nbsp;&nbsp;7.右键单击pom.xml，单击maven-&gt;reimport，保证网络顺畅，稍等片刻即导入成功"></a>&nbsp;&nbsp;7.右键单击pom.xml，单击maven-&gt;reimport，保证网络顺畅，稍等片刻即导入成功</h4><p><img src="https://www.wandada.live/images/17073244-7f41797af40ce6bf.png" alt=""></p>
<h3 id="（4）服务器配置（Tomcat）"><a href="#（4）服务器配置（Tomcat）" class="headerlink" title="（4）服务器配置（Tomcat）"></a>（4）服务器配置（Tomcat）</h3><h4 id="nbsp-nbsp-1-下载并安装Tomcat服务器"><a href="#nbsp-nbsp-1-下载并安装Tomcat服务器" class="headerlink" title="&nbsp;&nbsp;1.下载并安装Tomcat服务器"></a>&nbsp;&nbsp;1.下载并安装Tomcat服务器</h4><h4 id="nbsp-nbsp-2-File-gt-Project-Structrue-gt-Artifacts-点击右上“-”，分别添加Web-Application-Exploded和Web-Application-Archive"><a href="#nbsp-nbsp-2-File-gt-Project-Structrue-gt-Artifacts-点击右上“-”，分别添加Web-Application-Exploded和Web-Application-Archive" class="headerlink" title="&nbsp;&nbsp;2.File-&gt;Project Structrue-&gt;Artifacts,点击右上“+”，分别添加Web Application:Exploded和Web Application:Archive"></a>&nbsp;&nbsp;2.File-&gt;Project Structrue-&gt;Artifacts,点击右上“+”，分别添加Web Application:Exploded和Web Application:Archive</h4><p><img src="https://www.wandada.live/images/17073244-b8776c7ad84b96da.png" alt=""></p>
<h4 id="nbsp-nbsp-3-具体配置如下：（以工程OnlineVotingSystem为例）"><a href="#nbsp-nbsp-3-具体配置如下：（以工程OnlineVotingSystem为例）" class="headerlink" title="&nbsp;&nbsp;3.具体配置如下：（以工程OnlineVotingSystem为例）"></a>&nbsp;&nbsp;3.具体配置如下：（以工程OnlineVotingSystem为例）</h4><p><img src="https://www.wandada.live/images/17073244-a33b338c031b62b9.png" alt=""></p>
<h4 id="nbsp-nbsp-4-点击IDEA界面右上角-add-configuration…"><a href="#nbsp-nbsp-4-点击IDEA界面右上角-add-configuration…" class="headerlink" title="&nbsp;&nbsp;4.点击IDEA界面右上角 add configuration…"></a>&nbsp;&nbsp;4.点击IDEA界面右上角 add configuration…</h4><p><img src="https://www.wandada.live/images/17073244-fbfce8c72c30fa12.png" alt=""></p>
<h4 id="nbsp-nbsp-5-点击左上角“-”符号，选择Tomcat-Server-gt-Local"><a href="#nbsp-nbsp-5-点击左上角“-”符号，选择Tomcat-Server-gt-Local" class="headerlink" title="&nbsp;&nbsp;5.点击左上角“+”符号，选择Tomcat Server-&gt;Local"></a>&nbsp;&nbsp;5.点击左上角“+”符号，选择Tomcat Server-&gt;Local</h4><p><img src="https://www.wandada.live/images/17073244-4c2f144586c8d8f6.png" alt=""></p>
<h4 id="nbsp-nbsp-6-选择标记处的Deployment选项卡，并点击标记处的“-”按钮并选择”Artifact…”"><a href="#nbsp-nbsp-6-选择标记处的Deployment选项卡，并点击标记处的“-”按钮并选择”Artifact…”" class="headerlink" title="&nbsp;&nbsp;6.选择标记处的Deployment选项卡，并点击标记处的“+”按钮并选择”Artifact…”"></a>&nbsp;&nbsp;6.选择标记处的Deployment选项卡，并点击标记处的“+”按钮并选择”Artifact…”</h4><p><img src="https://www.wandada.live/images/17073244-d6ab2bf61f98e47a.png" alt=""></p>
<h4 id="nbsp-nbsp-7-选择标记处的选项，并点击ok"><a href="#nbsp-nbsp-7-选择标记处的选项，并点击ok" class="headerlink" title="&nbsp;&nbsp;7.选择标记处的选项，并点击ok"></a>&nbsp;&nbsp;7.选择标记处的选项，并点击ok</h4><p><img src="https://www.wandada.live/images/17073244-0d0ebc54ef8718de.png" alt=""></p>
<h4 id="nbsp-nbsp-8-将标记处修改为一下内容，可将服务器修改成热部署模式，即修改更新页面后不需重新启动服务器就可自动更新"><a href="#nbsp-nbsp-8-将标记处修改为一下内容，可将服务器修改成热部署模式，即修改更新页面后不需重新启动服务器就可自动更新" class="headerlink" title="&nbsp;&nbsp;8.将标记处修改为一下内容，可将服务器修改成热部署模式，即修改更新页面后不需重新启动服务器就可自动更新"></a>&nbsp;&nbsp;8.将标记处修改为一下内容，可将服务器修改成热部署模式，即修改更新页面后不需重新启动服务器就可自动更新</h4><p><img src="https://www.wandada.live/images/17073244-142ac7bbd4d6d49d.png" alt=""></p>
<h4 id="nbsp-nbsp-9-页面左上角将标记处修改为刚配置的Tomcat服务器，点击运行"><a href="#nbsp-nbsp-9-页面左上角将标记处修改为刚配置的Tomcat服务器，点击运行" class="headerlink" title="&nbsp;&nbsp;9.页面左上角将标记处修改为刚配置的Tomcat服务器，点击运行"></a>&nbsp;&nbsp;9.页面左上角将标记处修改为刚配置的Tomcat服务器，点击运行</h4><p><img src=".https://www.wandada.live/images/17073244-8965836d59fffed9.png" alt=""></p>
<h4 id="nbsp-nbsp-10-服务器启动成功后会自动弹出hello-world页面，maven-web工程创建成功"><a href="#nbsp-nbsp-10-服务器启动成功后会自动弹出hello-world页面，maven-web工程创建成功" class="headerlink" title="&nbsp;&nbsp;10.服务器启动成功后会自动弹出hello world页面，maven web工程创建成功"></a>&nbsp;&nbsp;10.服务器启动成功后会自动弹出hello world页面，maven web工程创建成功</h4>]]></content>
      <tags>
        <tag>操作笔记</tag>
        <tag>java</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal（preview） 安装踩坑记录</title>
    <url>/2019/10/27/Windows%20Terminal%EF%BC%88preview%EF%BC%89%20%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Windows-Terminal（preview）-安装踩坑记录"><a href="#Windows-Terminal（preview）-安装踩坑记录" class="headerlink" title="Windows Terminal（preview） 安装踩坑记录"></a>Windows Terminal（preview） 安装踩坑记录</h1><p>最近微软新出了一款命令行终端工具Winows Terminal，闲暇时鼓捣了一下，将安装和使用时遇到的坑记录如下：</p>
<h2 id="（一）关于安装"><a href="#（一）关于安装" class="headerlink" title="（一）关于安装"></a>（一）关于安装</h2><p>​       可直接使用Windows电脑自带的Micsoft Store直接搜索Windos Terminal下载，注意其系统要求，若遇见<strong>可获取但无法安装</strong>的情况，那么您的Windows很有可能需要升级更新操作系统后才能下载</p>
<p><img src="https://www.wandada.live/images/v2-022f629e91efac27abb4b7b0d0bca22d_b.png" alt=""></p>
<h2 id="（二）关于设置"><a href="#（二）关于设置" class="headerlink" title="（二）关于设置"></a>（二）关于设置</h2><p>​       在开始菜单中找到Winows Terminal并打开 ,默认界面的图没有找到，以下是我改造完毕的界面，请忽略我的直男审美hhhh，下面我会阐述一下我修改的思路和具体细节：</p>
<p><img src="https://www.wandada.live/images/v2-4ad9ffdc1ff08498627a8349041d04a6_b.png" alt=""></p>
<p>（1）首先打开上图界面中的setting选项，会打开一个名为profile.json的json文件，Windows Ternimal的相关配置全部都是基于此配置文件（在此吐槽一下微软的这种配置习惯，好好地整一个配置的图形界面不好吗😤，对于我这种英文不太好的人真的是太不友好了）</p>
<p><img src="https://www.wandada.live/images/v2-a49a694c1f9300ca9841876b5404a0f0_b.png" alt=""></p>
<p>（2）json格式的配置文件，通常是以<strong>“配置项”：配置参数</strong> 的格式来进行配置的，整个配置文件有三个部分，分别是<strong>globals</strong>，<strong>profiles</strong>，<strong>schemes</strong>，我们只需要修改配置项的参数即可对Windows Terminal完成设置</p>
<p>接下来具体描述几个常用配置：</p>
<p>（3）globals中的<strong>initialCols/initialRows</strong> 分别设置Windows terminal<strong>窗口的宽和长</strong></p>
<p>（4）<strong>添加git bash窗口</strong>，首先<strong>将git的bin目录添加到系统的环境变量path中</strong>，其次在profiles配置项列表末尾添加以下代码，<strong>profiles的其他部分基本设置参考下列代码的注释,</strong>若要添加其他应用，参考此方法，不再赘述</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">,</span><br><span class="line">            &quot;acrylicOpacity&quot; : 0.75,               //毛玻璃透明效果透明度</span><br><span class="line">            &quot;closeOnExit&quot; : true,</span><br><span class="line">            &quot;colorScheme&quot; : &quot;Campbell&quot;,           //schemes中提供的窗口颜色配置的name</span><br><span class="line">            &quot;commandline&quot; : &quot;bash.exe&quot;,</span><br><span class="line">            &quot;cursorColor&quot; : &quot;#7EA2B4&quot;,           //光标颜色</span><br><span class="line">            &quot;cursorShape&quot; : &quot;bar&quot;,               //光标形状</span><br><span class="line">            &quot;fontFace&quot; : &quot;Consolas&quot;,</span><br><span class="line">            &quot;fontSize&quot; : 16,                      //字体大小</span><br><span class="line">            &quot;guid&quot; : &quot;&#123;019f913c-595c-4498-a934-e01e71cd4cbf&#125;&quot;,</span><br><span class="line">            &quot;historySize&quot; : 9001,</span><br><span class="line">            &quot;icon&quot; : &quot; &quot;,                   //图标地址</span><br><span class="line">            &quot;name&quot; : &quot;git-bash&quot;,</span><br><span class="line">            &quot;padding&quot; : &quot;0, 0, 0, 0&quot;,</span><br><span class="line">            &quot;snapOnInput&quot; : true,</span><br><span class="line">            &quot;startingDirectory&quot; : &quot;%USERPROFILE%&quot;,</span><br><span class="line">            &quot;useAcrylic&quot; : true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5）通常打开Windows Terminal后默认打开的是powershell窗口，若要将其设置为<strong>默认打开cmd</strong>，可将<strong>profiles中cmd对应的guid值复制到globals.defaultProfile</strong>中即可</p>
<p><img src="https://www.wandada.live/images/v2-edb4659500c4a526f509d7bc3fdbbbdf_b.png" alt=""></p>
<p>  （6）schemes部分主要给出了微软出的6套颜色设计方案，只需将<strong>schemes[]配置项列表中某一方案的name属性值复制到profiles[]中某一窗口的colorScheme属性值</strong>即可设置完毕，也可在网上寻找其他人的颜色设计方案粘贴到schemes[]中，但<strong>建议新手除backgroud属性稍微修改一下背景色外不要去动其他的schemes[]配置项</strong></p>
<h2 id="（3）关于一些Bug"><a href="#（3）关于一些Bug" class="headerlink" title="（3）关于一些Bug"></a><strong>（3）关于一些Bug</strong></h2><p>​       首先有一个哭笑不得的点就是关于使用鼠标拖动窗口的问题，我在下载完毕后首先就发现按住窗口左边顶部无法对Windows Terminal进行拖动，查询了一些博客后才发现之后<strong>按住右上角红圈处才能对窗口拖动</strong></p>
<p><img src="https://www.wandada.live/images/v2-d2ce1b9e187b0dbdfb461c3549564f9f_b.png" alt=""></p>
<p>​       其次就是我们平常打开cmd或者Powershell时使用的Win+R输入cmd或者Powershell，仍然打开的是windows自带的命令行终端而不是Windows Terminal，这个问题还没有解决，另，据说Windows Terminal还支持支持emoji表情包和超链接，但倒腾了半天还是没有实现，各位大佬如果找到的解决方案可以私信我或者评论区里注明，万分感谢！</p>
<h2 id="（4）总结"><a href="#（4）总结" class="headerlink" title="（4）总结"></a>（4）总结</h2><p>​       相对于windows自带的命令行工具，Windows Terminal优势在于多标签以及主题可定制的功能，极大地提高了命令行终端的用户体验，据说微软未来还将推出正式版的Windows Terminal工具，对此表示期待</p>
]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2019/10/25/test/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>hello world</tag>
      </tags>
  </entry>
</search>
